{
  "source": {
    "hash": "0x26472532bb0bd295b1e59c0e194b0264b3522ebc1949e6b17d606cac1c3b031f",
    "language": "ink! 5.1.1",
    "compiler": "rustc 1.91.0-nightly",
    "build_info": {
      "build_mode": "Release",
      "cargo_contract_version": "5.0.3",
      "rust_toolchain": "nightly-x86_64-apple-darwin",
      "wasm_opt_settings": {
        "keep_debug_symbols": false,
        "optimization_passes": "Z"
      }
    }
  },
  "contract": {
    "name": "factory_contract",
    "version": "0.1.0",
    "authors": [
      "Stake Technologies <devops@stake.co.jp>"
    ]
  },
  "image": null,
  "spec": {
    "constructors": [
      {
        "args": [
          {
            "label": "fee_to_setter",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 0
            }
          },
          {
            "label": "pair_code_hash",
            "type": {
              "displayName": [
                "Hash"
              ],
              "type": 13
            }
          }
        ],
        "default": false,
        "docs": [
          "Constructor do contrato",
          "",
          "# Parâmetros",
          "* `fee_to_setter` - Endereço autorizado a definir o fee_to",
          "* `pair_code_hash` - Hash do código dos contratos de par",
          "",
          "# Validações",
          "* fee_to_setter não pode ser endereço zero"
        ],
        "label": "new",
        "payable": false,
        "returnType": {
          "displayName": [
            "ink_primitives",
            "ConstructorResult"
          ],
          "type": 18
        },
        "selector": "0x9bae9d5e"
      }
    ],
    "docs": [],
    "environment": {
      "accountId": {
        "displayName": [
          "AccountId"
        ],
        "type": 0
      },
      "balance": {
        "displayName": [
          "Balance"
        ],
        "type": 31
      },
      "blockNumber": {
        "displayName": [
          "BlockNumber"
        ],
        "type": 32
      },
      "chainExtension": {
        "displayName": [
          "ChainExtension"
        ],
        "type": 33
      },
      "hash": {
        "displayName": [
          "Hash"
        ],
        "type": 13
      },
      "maxEventTopics": 4,
      "staticBufferSize": 16384,
      "timestamp": {
        "displayName": [
          "Timestamp"
        ],
        "type": 20
      }
    },
    "events": [
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "token_0",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 0
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "token_1",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 0
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "pair",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 0
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "length",
            "type": {
              "displayName": [
                "u64"
              ],
              "type": 20
            }
          }
        ],
        "docs": [],
        "label": "PairCreated",
        "module_path": "factory_contract::factory",
        "signature_topic": "0xd9ae8e26ead44d0f1da9d45e35f2655f310f208ccc68265c2a65a94544ec121e"
      }
    ],
    "lang_error": {
      "displayName": [
        "ink",
        "LangError"
      ],
      "type": 19
    },
    "messages": [
      {
        "args": [
          {
            "label": "pid",
            "type": {
              "displayName": [
                "u64"
              ],
              "type": 20
            }
          }
        ],
        "default": false,
        "docs": [
          " Retorna endereço do par no índice especificado",
          " ",
          " # Parâmetros",
          " * `pid` - Índice do par (0-based)",
          " ",
          " # Retorna",
          " * `Some(AccountId)` - Endereço do par se existir",
          " * `None` - Se índice inválido"
        ],
        "label": "all_pairs",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 21
        },
        "selector": "0x1a66bf75"
      },
      {
        "args": [],
        "default": false,
        "docs": [
          " Retorna quantidade total de pares criados",
          " ",
          " # Retorna",
          " * `u64` - Número total de pares registrados na factory"
        ],
        "label": "all_pairs_length",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 23
        },
        "selector": "0x112ee22d"
      },
      {
        "args": [],
        "default": false,
        "docs": [
          " Retorna endereço atual do fee_to (receptor de taxas)",
          " ",
          " # Retorna",
          " * `AccountId` - Endereço que recebe taxas ou endereço zero se desabilitado"
        ],
        "label": "fee_to",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 24
        },
        "selector": "0x358e4c70"
      },
      {
        "args": [],
        "default": false,
        "docs": [
          " Retorna endereço do fee_to_setter (autorizado a definir taxas)",
          " ",
          " # Retorna",
          " * `AccountId` - Endereço autorizado a modificar configurações de taxa"
        ],
        "label": "fee_to_setter",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 24
        },
        "selector": "0x70ee8563"
      },
      {
        "args": [
          {
            "label": "token_a",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 0
            }
          },
          {
            "label": "token_b",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 0
            }
          }
        ],
        "default": false,
        "docs": [
          " Retorna endereço do par para dois tokens (ordenação automática)",
          " ",
          " # Parâmetros",
          " * `token_a` - Primeiro token",
          " * `token_b` - Segundo token",
          " ",
          " # Retorna",
          " * `Some(AccountId)` - Endereço do par se existir",
          " * `None` - Se par não foi criado ainda"
        ],
        "label": "get_pair",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 21
        },
        "selector": "0x337daf4f"
      },
      {
        "args": [],
        "default": false,
        "docs": [
          " Retorna hash do código dos contratos de par",
          " ",
          " # Retorna",
          " * `Hash` - Hash usado para deterministic deployment dos pares"
        ],
        "label": "pair_contract_code_hash",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 25
        },
        "selector": "0xc89abafe"
      },
      {
        "args": [
          {
            "label": "token_a",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 0
            }
          },
          {
            "label": "token_b",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 0
            }
          }
        ],
        "default": false,
        "docs": [
          " Cria um novo par de tokens",
          " ",
          " # Parâmetros",
          " * `token_a` - Primeiro token do par",
          " * `token_b` - Segundo token do par",
          " ",
          " # Retorna",
          " * `Ok(AccountId)` - Endereço do novo par criado",
          " * `Err(FactoryError)` - Erro específico da operação",
          " ",
          " # Validações",
          " * Tokens não podem ser idênticos",
          " * Tokens não podem ser endereço zero",
          " * Par não pode já existir"
        ],
        "label": "create_pair",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 26
        },
        "selector": "0xadc920b3"
      },
      {
        "args": [
          {
            "label": "fee_to",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 0
            }
          }
        ],
        "default": false,
        "docs": [
          " Define novo endereço fee_to",
          " ",
          " # Parâmetros",
          " * `fee_to` - Novo endereço que receberá as taxas",
          " ",
          " # Controle de Acesso",
          " * Apenas o fee_to_setter pode chamar esta função"
        ],
        "label": "set_fee_to",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 29
        },
        "selector": "0x67b3ae9d"
      },
      {
        "args": [
          {
            "label": "fee_to_setter",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 0
            }
          }
        ],
        "default": false,
        "docs": [
          " Define novo endereço fee_to_setter (transferência de propriedade)",
          " ",
          " # Parâmetros",
          " * `fee_to_setter` - Novo endereço autorizado a definir taxas",
          " ",
          " # Controle de Acesso",
          " * Apenas o fee_to_setter atual pode chamar esta função",
          " ",
          " # Validações",
          " * Novo fee_to_setter não pode ser endereço zero"
        ],
        "label": "set_fee_to_setter",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 29
        },
        "selector": "0xa06adbda"
      }
    ]
  },
  "storage": {
    "root": {
      "layout": {
        "struct": {
          "fields": [
            {
              "layout": {
                "root": {
                  "layout": {
                    "leaf": {
                      "key": "0x8348c7e8",
                      "ty": 0
                    }
                  },
                  "root_key": "0x8348c7e8",
                  "ty": 3
                }
              },
              "name": "fee_to"
            },
            {
              "layout": {
                "leaf": {
                  "key": "0x00000000",
                  "ty": 0
                }
              },
              "name": "fee_to_setter"
            },
            {
              "layout": {
                "root": {
                  "layout": {
                    "leaf": {
                      "key": "0xe146dd02",
                      "ty": 0
                    }
                  },
                  "root_key": "0xe146dd02",
                  "ty": 8
                }
              },
              "name": "get_pair"
            },
            {
              "layout": {
                "leaf": {
                  "key": "0x00000000",
                  "ty": 12
                }
              },
              "name": "all_pairs"
            },
            {
              "layout": {
                "root": {
                  "layout": {
                    "leaf": {
                      "key": "0x680f1780",
                      "ty": 13
                    }
                  },
                  "root_key": "0x680f1780",
                  "ty": 14
                }
              },
              "name": "pair_contract_code_hash"
            }
          ],
          "name": "FactoryContract"
        }
      },
      "root_key": "0x00000000",
      "ty": 17
    }
  },
  "types": [
    {
      "id": 0,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 1,
                "typeName": "[u8; 32]"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "types",
          "AccountId"
        ]
      }
    },
    {
      "id": 1,
      "type": {
        "def": {
          "array": {
            "len": 32,
            "type": 2
          }
        }
      }
    },
    {
      "id": 2,
      "type": {
        "def": {
          "primitive": "u8"
        }
      }
    },
    {
      "id": 3,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "V",
            "type": 0
          },
          {
            "name": "KeyType",
            "type": 4
          }
        ],
        "path": [
          "ink_storage",
          "lazy",
          "Lazy"
        ]
      }
    },
    {
      "id": 4,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "L",
            "type": 5
          },
          {
            "name": "R",
            "type": 6
          }
        ],
        "path": [
          "ink_storage_traits",
          "impls",
          "ResolverKey"
        ]
      }
    },
    {
      "id": 5,
      "type": {
        "def": {
          "composite": {}
        },
        "path": [
          "ink_storage_traits",
          "impls",
          "AutoKey"
        ]
      }
    },
    {
      "id": 6,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "ParentKey",
            "type": 7
          }
        ],
        "path": [
          "ink_storage_traits",
          "impls",
          "ManualKey"
        ]
      }
    },
    {
      "id": 7,
      "type": {
        "def": {
          "tuple": []
        }
      }
    },
    {
      "id": 8,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "K",
            "type": 9
          },
          {
            "name": "V",
            "type": 0
          },
          {
            "name": "KeyType",
            "type": 10
          }
        ],
        "path": [
          "ink_storage",
          "lazy",
          "mapping",
          "Mapping"
        ]
      }
    },
    {
      "id": 9,
      "type": {
        "def": {
          "tuple": [
            0,
            0
          ]
        }
      }
    },
    {
      "id": 10,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "L",
            "type": 5
          },
          {
            "name": "R",
            "type": 11
          }
        ],
        "path": [
          "ink_storage_traits",
          "impls",
          "ResolverKey"
        ]
      }
    },
    {
      "id": 11,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "ParentKey",
            "type": 7
          }
        ],
        "path": [
          "ink_storage_traits",
          "impls",
          "ManualKey"
        ]
      }
    },
    {
      "id": 12,
      "type": {
        "def": {
          "sequence": {
            "type": 0
          }
        }
      }
    },
    {
      "id": 13,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 1,
                "typeName": "[u8; 32]"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "types",
          "Hash"
        ]
      }
    },
    {
      "id": 14,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "V",
            "type": 13
          },
          {
            "name": "KeyType",
            "type": 15
          }
        ],
        "path": [
          "ink_storage",
          "lazy",
          "Lazy"
        ]
      }
    },
    {
      "id": 15,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "L",
            "type": 5
          },
          {
            "name": "R",
            "type": 16
          }
        ],
        "path": [
          "ink_storage_traits",
          "impls",
          "ResolverKey"
        ]
      }
    },
    {
      "id": 16,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "ParentKey",
            "type": 7
          }
        ],
        "path": [
          "ink_storage_traits",
          "impls",
          "ManualKey"
        ]
      }
    },
    {
      "id": 17,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "fee_to",
                "type": 3,
                "typeName": "<ink::storage::Lazy<AccountId> as::ink::storage::traits::\nAutoStorableHint<::ink::storage::traits::ManualKey<3905374339u32,\n()>,>>::Type"
              },
              {
                "name": "fee_to_setter",
                "type": 0,
                "typeName": "<AccountId as::ink::storage::traits::AutoStorableHint<::ink::\nstorage::traits::ManualKey<1059363712u32, ()>,>>::Type"
              },
              {
                "name": "get_pair",
                "type": 8,
                "typeName": "<Mapping<(AccountId, AccountId), AccountId> as::ink::storage::traits\n::AutoStorableHint<::ink::storage::traits::ManualKey<48056033u32,\n()>,>>::Type"
              },
              {
                "name": "all_pairs",
                "type": 12,
                "typeName": "<Vec<AccountId> as::ink::storage::traits::AutoStorableHint<::\nink::storage::traits::ManualKey<42591883u32, ()>,>>::Type"
              },
              {
                "name": "pair_contract_code_hash",
                "type": 14,
                "typeName": "<ink::storage::Lazy<Hash> as::ink::storage::traits::\nAutoStorableHint<::ink::storage::traits::ManualKey<2148994920u32,\n()>,>>::Type"
              }
            ]
          }
        },
        "path": [
          "factory_contract",
          "factory",
          "FactoryContract"
        ]
      }
    },
    {
      "id": 18,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 7
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 19
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 7
          },
          {
            "name": "E",
            "type": 19
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 19,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 1,
                "name": "CouldNotReadInput"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "LangError"
        ]
      }
    },
    {
      "id": 20,
      "type": {
        "def": {
          "primitive": "u64"
        }
      }
    },
    {
      "id": 21,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 22
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 19
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 22
          },
          {
            "name": "E",
            "type": 19
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 22,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 0,
                "name": "None"
              },
              {
                "fields": [
                  {
                    "type": 0
                  }
                ],
                "index": 1,
                "name": "Some"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 0
          }
        ],
        "path": [
          "Option"
        ]
      }
    },
    {
      "id": 23,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 20
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 19
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 20
          },
          {
            "name": "E",
            "type": 19
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 24,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 0
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 19
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 0
          },
          {
            "name": "E",
            "type": 19
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 25,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 13
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 19
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 13
          },
          {
            "name": "E",
            "type": 19
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 26,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 27
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 19
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 27
          },
          {
            "name": "E",
            "type": 19
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 27,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 0
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 28
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 0
          },
          {
            "name": "E",
            "type": 28
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 28,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 0,
                "name": "IdenticalAddresses"
              },
              {
                "index": 1,
                "name": "PairExists"
              },
              {
                "index": 2,
                "name": "CallerIsNotFeeSetter"
              },
              {
                "index": 3,
                "name": "ZeroAddress"
              }
            ]
          }
        },
        "path": [
          "factory_contract",
          "factory",
          "FactoryError"
        ]
      }
    },
    {
      "id": 29,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 30
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 19
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 30
          },
          {
            "name": "E",
            "type": 19
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 30,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 7
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 28
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 7
          },
          {
            "name": "E",
            "type": 28
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 31,
      "type": {
        "def": {
          "primitive": "u128"
        }
      }
    },
    {
      "id": 32,
      "type": {
        "def": {
          "primitive": "u32"
        }
      }
    },
    {
      "id": 33,
      "type": {
        "def": {
          "variant": {}
        },
        "path": [
          "ink_env",
          "types",
          "NoChainExtension"
        ]
      }
    }
  ],
  "version": 5
}